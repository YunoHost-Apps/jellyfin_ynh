#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

ynh_script_progression --message="Validating installation parameters..." --weight=1

final_path=/etc/jellyfin
test ! -e "$final_path" || ynh_die --message="There is already a directory: $final_path "
test ! -e "/var/lib/jellyfin" || ynh_die --message="There is already a directory: /var/lib/jellyfin "

# Register (book) web path
ynh_webpath_register --app="$app" --domain="$domain" --path_url="$path_url"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=2

ynh_app_setting_set --app="$app" --key=domain --value="$domain"
ynh_app_setting_set --app="$app" --key=path --value="$path_url"
ynh_app_setting_set --app="$app" --key=final_path --value=$final_path
ynh_app_setting_set --app="$app" --key=is_public --value="$is_public"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Configuring firewall..." --weight=1

# Find an available port
port=$(ynh_find_port --port=8095)
ynh_app_setting_set --app="$app" --key=port --value="$port"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_print_info "Installing dependencies..."

ynh_install_app_dependencies at libass5 libbluray1 libdrm2 libmp3lame0 libopus0 libtheora0 libva-drm1 libva-x11-1 libva1 libvdpau1 libvorbis0a libvorbisenc2 libx264-148 libx265-95 libzvbi0 libwebpmux2

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set "$app" final_path "$final_path"

# Download, check integrity, uncompress and patch the source from jellyfin-ffmpeg-[arch].src
case $(uname -m) in
    x86_64) ynh_setup_source "$final_path" "jellyfin-ffmpeg-amd64" ;;
    aarch64) ynh_setup_source "$final_path" "jellyfin-ffmpeg-arm64" ;;
    armv7l) ynh_setup_source "$final_path" "jellyfin-ffmpeg-armhf" ;;
    *) ynh_die "Unknown arch" ;;
esac

# Download, check integrity, uncompress and patch the source from jellyfin-server-[arch].src
case $(uname -m) in
    x86_64) ynh_setup_source "$final_path" "jellyfin-server-amd64" ;;
    aarch64) ynh_setup_source "$final_path" "jellyfin-server-arm64" ;;
    armv7l) ynh_setup_source "$final_path" "jellyfin-server-armhf" ;;
    *) ynh_die "Unknown arch" ;;
esac

# Download, check integrity, uncompress and patch the source from jellyfin-web.src
case $(uname -m) in
    x86_64) ynh_setup_source "$final_path" "jellyfin-web" ;;
    aarch64) ynh_setup_source "$final_path" "jellyfin-web" ;;
    armv7l) ynh_setup_source "$final_path" "jellyfin-web" ;;
    *) ynh_die "Unknown arch" ;;
esac

#==============================================
# INSTALL JELLYFIN
#==============================================

dpkg --install "$final_path"/jellyfin-ffmpeg.deb
dpkg --install "$final_path"/jellyfin-server.deb
dpkg --install "$final_path"/jellyfin-web.deb
rm "$final_path"/*.deb

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=6

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=2

# Create a system user
ynh_system_user_create --username="$app"

#=================================================
# MODIFY A CONFIG FILE
#=================================================

# Load services once to generate system.xml
systemctl enable jellyfin
systemctl start jellyfin
sleep 5
systemctl stop jellyfin

# Port config
ynh_replace_string --match_string="<HttpServerPortNumber>8096</HttpServerPortNumber>" --replace_string="<HttpServerPortNumber>$port</HttpServerPortNumber>" --target_file="/etc/jellyfin/system.xml"

# BaseUrl config
ynh_replace_string --match_string="<BaseUrl />" --replace_string="<BaseUrl>$path_url</BaseUrl>" --target_file="/etc/jellyfin/system.xml"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R "$app": $final_path
chown -R "$app": /var/lib/jellyfin

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --weight=2

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add "$app" --description "Jellyfin media center" --log "/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

# Start a systemd service
ynh_systemd_action --service_name="$app" --action="start" --log_path="systemd" --line_match="Startup complete"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring SSOwat..." --weight=2

# Make app public if necessary or protect it
if [ "$is_public" -eq 1 ]
then
	# Everyone can access the app.
	# The "main" permission is automatically created before the install script.
	 ynh_permission_update --permission "main" --add "visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=2

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last