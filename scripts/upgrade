#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name="$app" --action="stop" --log_path="systemd" --timeout=15

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If render group exists, and system user doesn't belong to it, add it
if getent group render && ! id -Gn "$app" | grep -qw "\brender\b" >/dev/null; then
	adduser "$app" render
fi

# If path keys do not exist, create them
# If config_path is mixed up with install_dir, fix them
if [ -z "$config_path" ] || [[ $config_path = "/var/lib/jellyfin" ]]; then
	config_path=/etc/jellyfin
	ynh_app_setting_set --app="$app" --key=config_path --value=$config_path
fi

ynh_app_setting_delete --app="$app" --key=is_public

# If discovery key does not exist, create it
if [ -z "${discovery:-}" ]; then
	discovery=0
	ynh_app_setting_set --app="$app" --key=discovery --value=$discovery
fi

if [ ! -f "/etc/logrotate.d/$app" ]; then
	# Fix possibly missing file due to buggy restore:
	ynh_use_logrotate
fi

discovery_service=$discovery
discovery_client=$discovery

if [ $discovery -eq 1 ]; then
	ynh_script_progression --message="Configuring firewall..." --weight=1

	# Open port $discovery_service_port for service auto-discovery
	if ynh_port_available --port=$discovery_service_port; then
		ynh_exec_warn_less yunohost firewall allow UDP $discovery_service_port
	else
		discovery_service=0
		ynh_print_warn --message="Port $discovery_service_port (for service auto-discovery) is not available. Continuing nonetheless."
	fi

	# Open port $discovery_client_port for client auto-discovery
	if ynh_port_available --port=$discovery_client_port; then
		ynh_exec_warn_less yunohost firewall allow UDP $discovery_client_port
	else
		discovery_client=0
		ynh_print_warn --message="Port $discovery_client_port (for client auto-discovery) is not available. Continuing nonetheless."
	fi
fi

ynh_app_setting_set --app=$app --key=discovery_service --value=$discovery_service
ynh_app_setting_set --app=$app --key=discovery_client --value=$discovery_client

#=================================================
# UPGRADE PACKAGES
#=================================================
ynh_script_progression --message="Upgrading packages..." --weight=3

# Backup the configuration files to prevent yunohost to see a manual edit
bakdir=$(mktemp -d)
for name in system.xml network.xml logging.json; do
	cp "$config_path/$name" "$bakdir/$name"
done

# ynh_package_install passes --no-remove so the ffmpeg5 -> ffmpeg6 migration is blocked.
# So we remove the packages before installing the new ones.
if ynh_package_is_installed "jellyfin-ffmpeg5"; then
	# Previous versions of the package did not do that so remove_app_dependencies doesn't do its job
	apt-mark auto jellyfin-server jellyfin-web jellyfin-ffmpeg5
	ynh_remove_app_dependencies
fi

install_jellyfin_packages

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=2

# Restore the files we just backed up before installing the debs...
for name in system.xml network.xml logging.json; do
	mv -f "$bakdir/$name" "$config_path/$name"
done
ynh_secure_remove "$bakdir"

# TODO: investigate if we can avoid overriding system.xml
#ynh_add_config --template="system.xml" --destination="$config_path/system.xml"
ynh_add_config --template="network.xml" --destination="$config_path/network.xml"
ynh_add_config --template="logging.json" --destination="$config_path/logging.json"

#=================================================
# INSTALL LDAP PLUGIN
#=================================================
ynh_script_progression --message="Installing LDAP plugin..." --weight=2

ynh_setup_source --dest_dir="/var/lib/jellyfin/plugins/LDAP Authentication" --source_id=plugin_ldap
mkdir -p /var/lib/jellyfin/plugins/configurations/
ynh_add_config --template="LDAP-Auth.xml" --destination="/var/lib/jellyfin/plugins/configurations/LDAP-Auth.xml"

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R $app: $data_path
chown -R $app: $config_path

#=================================================
# YUNOHOST MULTIMEDIA INTEGRATION
#=================================================
ynh_script_progression --message="Adding multimedia directories..." --weight=2

# Build YunoHost multimedia directories
ynh_multimedia_build_main_dir
# Allow Jellyfin to write into these directories
ynh_multimedia_addaccess $app

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="Jellyfin media center"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="start" --log_path="systemd" --timeout=15

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
