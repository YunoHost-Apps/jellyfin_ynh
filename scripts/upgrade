#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME
final_path=$(ynh_app_setting_get --app="$app" --key=final_path)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=3

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name="$app" --action="stop" --log_path="/var/log/$app/$app.log"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=3

ynh_app_setting_set "$app" final_path "$final_path"

# Download, check integrity, uncompress and patch the source from jellyfin-ffmpeg-[arch].src
case $(uname -m) in
    x86_64) ynh_setup_source "$final_path" "jellyfin-ffmpeg-amd64" ;;
    aarch64) ynh_setup_source "$final_path" "jellyfin-ffmpeg-arm64" ;;
    armv7l) ynh_setup_source "$final_path" "jellyfin-ffmpeg-armhf" ;;
    *) ynh_die "Unknown arch" ;;
esac

# Download, check integrity, uncompress and patch the source from jellyfin-server-[arch].src
case $(uname -m) in
    x86_64) ynh_setup_source "$final_path" "jellyfin-server-amd64" ;;
    aarch64) ynh_setup_source "$final_path" "jellyfin-server-arm64" ;;
    armv7l) ynh_setup_source "$final_path" "jellyfin-server-armhf" ;;
    *) ynh_die "Unknown arch" ;;
esac

# Download, check integrity, uncompress and patch the source from jellyfin-web.src
case $(uname -m) in
    x86_64) ynh_setup_source "$final_path" "jellyfin-web" ;;
    aarch64) ynh_setup_source "$final_path" "jellyfin-web" ;;
    armv7l) ynh_setup_source "$final_path" "jellyfin-web" ;;
    *) ynh_die "Unknown arch" ;;
esac

#==============================================
# INSTALL JELLYFIN
#==============================================

dpkg --install "$final_path"/jellyfin-ffmpeg.deb
dpkg --install "$final_path"/jellyfin-server.deb
dpkg --install "$final_path"/jellyfin-web.deb
rm "$final_path"/*.deb

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username="$app"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R "$app": "$final_path"
chown -R "$app": /var/lib/jellyfin

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add "$app" --description "Jellyfin media center" --log "/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name="$app" --action="start" --log_path="systemd" --line_match="Startup complete"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
