#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression "Stopping $app's systemd service..."

ynh_systemctl --service="$app" --action="stop" --log_path="systemd" --timeout=15

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression "Ensuring downward compatibility..."

# If render group exists, and system user doesn't belong to it, add it
if getent group render && ! id -Gn "$app" | grep -qw "\brender\b" >/dev/null; then
	adduser "$app" render
fi

# If path keys do not exist, create them
# If config_path is mixed up with install_dir, fix them
if [ -z "$config_path" ] || [[ $config_path = "/var/lib/jellyfin" ]]; then
	config_path=/etc/jellyfin
	ynh_app_setting_set --key=config_path --value=$config_path
fi

ynh_app_setting_delete --key=is_public


if [ ! -f "/etc/logrotate.d/$app" ]; then
	# Fix possibly missing file due to buggy restore:
	ynh_config_add_logrotate
fi

#=================================================
# REMOVE OLD FILES
#=================================================
# Remove /var/lib/jellyfin/plugins-backup to mitigate a failed upgrade because a plugin is already there since an old upgrade.
# If it’s still there, it’s likely that the admin didn’t use this version of the plugin anymore.
ynh_script_progression "Removing /var/lib/jellyfin/plugins-backup directory..."
ynh_safe_rm "/var/lib/jellyfin/plugins-backup"

#=================================================
# UPGRADE PACKAGES
#=================================================
ynh_script_progression "Upgrading packages..."

# Backup the configuration files to prevent yunohost to see a manual edit
bakdir=$(mktemp -d)
for name in system.xml network.xml logging.json; do
	cp "$config_path/$name" "$bakdir/$name"
done

install_jellyfin_packages

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression "Updating configuration..."

# Restore the files we just backed up before installing the debs...
for name in system.xml network.xml logging.json; do
	mv -f "$bakdir/$name" "$config_path/$name"
done
ynh_safe_rm "$bakdir"

ynh_config_add --template="network.xml" --destination="$config_path/network.xml"
ynh_config_add --template="logging.json" --destination="$config_path/logging.json"

#=================================================
# ENSURE NO OLD/INCOMPATIBLE PLUGINS ARE LEFT
#=================================================
shopt -s nullglob
mkdir -p /var/lib/jellyfin/plugins-backup

if [ -d /var/lib/jellyfin/plugins ]; then
	for directory in /var/lib/jellyfin/plugins/*; do
		name="$(basename "$directory")"
		if [[ "$name" = "configurations" ]]; then
			# Keep plugin config
			continue
		fi

		if [ ! -f "$directory"/meta.json ]; then
			ynh_print_warn "Jellyfin plugin '$name' looks legacy (missing meta.json). Moving to /var/lib/jellyfin/plugins-backup."
			mv "$directory" /var/lib/jellyfin/plugins-backup/
		fi

		# Jellyfin doesn't refuse to start with old plugins. It just does weird
		# things such as https://github.com/jellyfin/jellyfin-plugin-ldapauth/issues/161
		# As a precaution, move older ABI plugins to another folder so things don't break
		abi="$(jq -r '.targetAbi' "$directory/meta.json")"

		if dpkg --compare-versions "$abi" lt "$plugin_abi"; then
			ynh_print_warn "Jellyfin plugin '$name' ABI $abi is lower than expected $plugin_abi. Moving to /var/lib/jellyfin/plugins-backup."
			mv "$directory" /var/lib/jellyfin/plugins-backup/
		fi
	done
fi

#=================================================
# INSTALL LDAP PLUGIN
#=================================================
ynh_script_progression "Installing LDAP plugin..."

ynh_setup_source --full_replace --dest_dir="/var/lib/jellyfin/plugins/LDAP Authentication" --source_id=plugin_ldap
mkdir -p /var/lib/jellyfin/plugins/configurations/
ynh_config_add --template="LDAP-Auth.xml" --destination="/var/lib/jellyfin/plugins/configurations/LDAP-Auth.xml"

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R "$app:" "$data_path"
chown -R "$app:" "$config_path"

#=================================================
# YUNOHOST MULTIMEDIA INTEGRATION
#=================================================
ynh_script_progression "Adding multimedia directories..."

# Build YunoHost multimedia directories
ynh_multimedia_build_main_dir

# Allow Jellyfin to write into these directories
ynh_multimedia_addaccess "$app"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

# Create a dedicated NGINX config
ynh_config_add_nginx

ynh_config_add --template="systemd.service" --destination="/etc/systemd/system/jellyfin.service.d/baseurl.service.conf"
systemctl daemon-reload

# Use logrotate to manage app-specific logfile(s)
ynh_config_add_logrotate

yunohost service add "$app" --description="Jellyfin media center"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="$app" --action="restart" --log_path="systemd" --timeout=15

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
